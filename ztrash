@extends('layouts.school')

@section('schoolcontent')
@php
    $user = auth()->user();
    $userPhoto = $user->profile_photo
        ? asset('storage/' . $user->profile_photo)
        : 'https://ui-avatars.com/api/?name=' . urlencode($user->name) . '&size=150';
@endphp

<div class="container py-4">
    <h4>ðŸ’¬ Chat Room - {{ $user->role === 'school' ? $user->name : $user->school->name }}</h4>

    <div id="chat-box" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto;"></div>
    <form id="chat-form">
        <input type="text" id="message" class="form-control" placeholder="Type your message..." autocomplete="off">
    </form>
</div>

<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script>
    const socket = io('http://localhost:3000');

    const schoolId = {{ $user->school_id ?? $user->id }};
    const userName = @json($user->name);
    const userPhoto = @json($userPhoto);
    const chatBox = document.getElementById('chat-box');
    const chatForm = document.getElementById('chat-form');
    const messageInput = document.getElementById('message');
    const storageKey = 'chat_' + schoolId;

    socket.emit('join-room', schoolId);

    const storedMessages = JSON.parse(localStorage.getItem(storageKey)) || [];
    storedMessages.forEach(msg => appendMessage(msg));

    socket.on('chat-message', (msg) => {
        appendMessage(msg);
        storedMessages.push(msg);
        if (storedMessages.length > 100) storedMessages.shift();
        localStorage.setItem(storageKey, JSON.stringify(storedMessages));
    });

    socket.on('typing', ({ user }) => {
        showTyping(user);
        clearTimeout(typingTimeout);
        typingTimeout = setTimeout(() => {
            clearTyping();
        }, 2000);
    });

    chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const message = messageInput.value.trim();
        if (!message) return;

        socket.emit('chat-message', {
            roomId: schoolId,
            user: userName,
            photo: userPhoto,
            message,
            timestamp: new Date().toLocaleTimeString()
        });

        messageInput.value = '';
        clearTyping();
    });

    messageInput.addEventListener('input', () => {
        socket.emit('typing', {
            roomId: schoolId,
            user: userName
        });
    });

    function appendMessage({ user, message, timestamp, photo }) {
        const div = document.createElement('div');
        div.classList.add('d-flex', 'align-items-start', 'mb-2');
        div.innerHTML = `
            <img src="${photo}" class="rounded-circle shadow me-2" width="30" height="30" style="object-fit: cover;">
            <div>
                <strong>${user}</strong>: ${message}
                <div class="text-muted" style="font-size: 0.8em;">${timestamp}</div>
            </div>
        `;
        chatBox.appendChild(div);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    let typingElement;
    let typingTimeout;

    function showTyping(user) {
        if (!typingElement) {
            typingElement = document.createElement('div');
            typingElement.classList.add('text-muted', 'fst-italic', 'mb-2');
            chatBox.appendChild(typingElement);
        }
        typingElement.textContent = `${user} is typing...`;
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    function clearTyping() {
        if (typingElement) {
            typingElement.remove();
            typingElement = null;
        }
    }
</script>
@endsection













































@extends('layouts.school')

@section('schoolcontent')


<div class="container py-4">
    <h4>ðŸ’¬ Chat Room - {{ auth()->user()->role === 'school' ? auth()->user()->name : auth()->user()->school->name }}</h4>

    <div id="chat-box" class="border rounded p-3 mb-3" style="height: 400px; overflow-y: auto;"></div>

    <form id="chat-form">
        <input type="text" id="message" class="form-control" placeholder="Type your message..." autocomplete="off">
    </form>


    <!-- Floating User Dropdown (Top Right) -->
        @php
            $user = auth()->user();
        @endphp

        <div class="mb-4"
        style="
            
        ">
            @if ($user->profile_photo)
                <img src="{{ asset('storage/' . $user->profile_photo) }}" 
                    alt="Profile Picture" 
                    class="rounded-circle shadow" 
                    width="20" height="20"
                    style="object-fit: cover;"
                    >
            @else
                <img src="https://ui-avatars.com/api/?name={{ urlencode($user->name) }}&size=150" 
                    alt="Default Avatar" 
                    class="rounded-circle shadow" 
                    width="20" height="20"
                    style="object-fit: cover;"
                    >
            @endif
        </div>

</div>

<script src="https://cdn.socket.io/4.7.2/socket.io.min.js"></script>
<script>
    const socket = io('http://localhost:3000');

    const schoolId = {{ auth()->user()->school_id ?? auth()->user()->id }};
    const userName = @json(auth()->user()->name);
    const userPhoto = @json(auth()->user()->profile_photo 
        ? asset('storage/' . auth()->user()->profile_photo) 
        : 'https://ui-avatars.com/api/?name=' . urlencode(auth()->user()->name) . '&size=150');

    const chatBox = document.getElementById('chat-box');
    const chatForm = document.getElementById('chat-form');
    const messageInput = document.getElementById('message');
    const storageKey = 'chat_' + schoolId;

    // Join the room
    socket.emit('join-room', schoolId);

    // Load previous messages from localStorage
    const storedMessages = JSON.parse(localStorage.getItem(storageKey)) || [];
    storedMessages.forEach(msg => appendMessage(msg));

    // Listen for chat history from server
    socket.on('chat-history', (history) => {
        chatBox.innerHTML = '';
        history.forEach(msg => appendMessage(msg));
    });

    // Listen for new incoming messages
    socket.on('chat-message', (msg) => {
        appendMessage(msg);
        storedMessages.push(msg);
        if (storedMessages.length > 100) storedMessages.shift();
        localStorage.setItem(storageKey, JSON.stringify(storedMessages));
    });

    // Send a message
    chatForm.addEventListener('submit', (e) => {
        e.preventDefault();
        const message = messageInput.value.trim();
        if (!message) return;

        socket.emit('chat-message', {
            roomId: schoolId,
            user: userName,
            photo: userPhoto,
            message,
            timestamp: new Date().toLocaleString()
        });

        messageInput.value = '';
    });

    // Append message to chat box
    function appendMessage({ user, message, timestamp, photo }) {
        const div = document.createElement('div');
        div.classList.add('d-flex', 'align-items-start', 'mb-2');
        div.innerHTML = `
            <img src="${photo}" class="rounded-circle shadow me-2" width="30" height="30" style="object-fit: cover;">
            <div>
                <strong>${user}</strong>: ${message}
                <div class="text-muted" style="font-size: 0.8em;">[${timestamp}]</div>
            </div>
        `;
        chatBox.appendChild(div);
        chatBox.scrollTop = chatBox.scrollHeight;
    }
</script>
@endsection

















const express = require('express');
const http = require('http');
const { Server } = require('socket.io');

const app = express();
const server = http.createServer(app);

// Chat history per school room (not stored in DB)
const chatHistory = {}; // { [schoolId]: [ { user, message, timestamp } ] }

const io = new Server(server, {
    cors: {
        origin: "*",
        methods: ["GET", "POST"]
    }
});

io.on('connection', (socket) => {
    console.log('ðŸ‘¤ New user connected');

    socket.on('join-room', (schoolId) => {
        socket.join(schoolId);
        console.log(`ðŸ“¥ User joined room: ${schoolId}`);

        // Send existing chat history to new joiner
        if (chatHistory[schoolId]) {
            socket.emit('chat-history', chatHistory[schoolId]);
        } else {
            chatHistory[schoolId] = [];
        }
    });

    socket.on('chat-message', (data) => {
        const { roomId, user, message } = data;

        const msg = {
            user,
            message,
            timestamp: new Date().toLocaleTimeString()
        };

        // Save to memory
        if (!chatHistory[roomId]) chatHistory[roomId] = [];
        chatHistory[roomId].push(msg);

        // Trim to 100 max messages
        if (chatHistory[roomId].length > 100) {
            chatHistory[roomId].shift();
        }

        // Broadcast to everyone in that room
        io.to(roomId).emit('chat-message', msg);
    });

    socket.on('disconnect', () => {
        console.log('ðŸ‘‹ User disconnected');
    });
});

server.listen(3000, () => {
    console.log('âœ… Socket.IO server running at http://localhost:3000');
});





@extends('layouts.school')

@section('schoolcontent')
<h3>Upload Assets for {{ $course->title }}</h3>

@if (session('success'))
    <div class="alert alert-success">{{ session('success') }}</div>
@endif

<form method="POST" action="{{ route('course-assets.store', $course->id) }}" enctype="multipart/form-data">
    @csrf

    <input type="hidden" name="course_id" value="{{ $course->id }}">

    <div class="mb-3">
        <label>PDF Files</label>
        <input type="file" name="pdf[]" class="form-control" multiple>
    </div>

    <div class="mb-3">
        <label>Images</label>
        <input type="file" name="image[]" class="form-control" multiple>
    </div>

    <div class="mb-3">
        <label>Video Links</label>
        <div id="videoLinks">
            <input type="url" name="video_link[]" class="form-control mb-2" placeholder="https://youtube.com/...">
        </div>
        <button type="button" id="addLink" class="btn btn-sm btn-secondary">+ Add another video link</button>
    </div>

    <button class="btn btn-primary">Upload</button>
</form>

<script>
    document.getElementById('addLink').addEventListener('click', function () {
        const input = document.createElement('input');
        input.type = 'url';
        input.name = 'video_link[]';
        input.placeholder = 'https://youtube.com/...';
        input.classList.add('form-control', 'mb-2');
        document.getElementById('videoLinks').appendChild(input);
    });
</script>

@endsection